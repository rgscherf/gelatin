{"version":3,"sources":["proto_crawl/cube/main.cljs"],"mappings":"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","names":["proto-crawl.cube.main/less","n","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","p1__44122#","p1__44123#","cljs.core/int?","cljs.spec.alpha/map-spec-impl","G__44125","cljs.core/map?","cljs.core/contains?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__44126","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/bounded-count","cljs.core/vector?","p__44127","map__44128","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","proto-crawl.cube.main/fill-orientation","t","s","e","part","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__44130","vec__44131","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","js/Error","proto-crawl.cube.main/vec->orient","v","cljs.spec.alpha.valid_QMARK_.cljs$core$IFn$_invoke$arity$2","proto-crawl.cube.main/->orient","proto-crawl.cube.main/roll","orient","direction","map__44134","b","w","cljs.core/keyword-identical?","cljs.core.match/backtrack","e44137","e__43219__auto__","e44138","e44139","e44140"],"sourcesContent":["(ns proto-crawl.cube.main\n  \"Namespace for cube operations.\n\n  Notation for cube faces:\n  T: Top face\n  S: South face\n  N: North face\n  E: East face\n  W: West face\n  B: Bottom face\n\n  Cubes are oriented by their T,S,E faces.\n  For example, the orientation for\n  {:t 1 :s 3 :e 5} is\n  {:t 1 :s 3 :e 5 :w 2 :b 6 :n 4}\n  (this is easy to derive--opposing faces sum to 7, after all!)\n\n  Rolling the cube:\n  To determine the orientation of a cube being rolled,\n  provide the current orientation plus the direction of the roll.\n  (e.g. moving one tile to the north is a :north direction move).\n  \"\n  (:require\n    [clojure.core.match :refer [match]]\n    [cljs.spec.alpha :as s]))\n\n\n(defn less [n] (- 7 n))\n\n(s/def ::face (s/and #(int? %)\n                     #(< 0 % 7)))\n(s/def ::t ::face)\n(s/def ::s ::face)\n(s/def ::e ::face)\n(s/def ::b ::face)\n(s/def ::w ::face)\n(s/def ::n ::face)\n(s/def ::orientation (s/keys :req-un [::t ::s ::e]\n                             :opt-un [::b ::e ::w]))\n(s/def ::orientation-vec (s/coll-of ::face :kind vector? :count 3))\n\n(defn fill-orientation\n  \"Given a partial (tse) orientation, fill out the remaining faces.\"\n  [{:keys [t s e] :as part}]\n  (merge part\n         {:w (less e)\n          :n (less s)\n          :b (less t)}))\n\n(defn vec->orient\n  \"Take a 3-tuple of the cube's top, south, and east faces.\n  Return a full orientation map conforming to ::orientation\"\n  [[t s e :as v]]\n  {:pre [(s/valid? ::orientation-vec v)]}\n  (fill-orientation {:t t :s s :e e}))\n\n(defn ->orient\n  [t s e]\n  (vec->orient [t s e]))\n\n(defn roll\n  \"Given an orientation and a direction, return the new orientation.\"\n  [orient direction]\n  (let [{:keys [t s e b n w]} (fill-orientation orient)]\n    (fill-orientation\n      (match direction\n             :north (->orient s b e)\n             :south (->orient n t e)\n             :east (->orient w s t)\n             :west (->orient e s b)))))\n\n"]}