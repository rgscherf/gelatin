{"version":3,"sources":["proto_crawl/maps/main.cljs"],"mappings":";;AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAML,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AA0BL;;;;AAAA,AAAMC,AAGHC;AAHH,AAIE,AAACC,AAAO,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAAF,AAAAD,AAAA,AAAA,AAAkBI;AAAlB,AACE,AAACC,AAAMH,AACA,AAACJ,AAAO;AAAAQ,AAAKE;AAAL,AAAA,AAAAD,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAcE;AAAd,AAAAR,AAAAM,AAAA,AAAA,AAAsBG;AAAtB,AACE,AAAA,AAAA,AAACL,AAAMG,AAAUC,AAAQN,AAASO;;AAD5C,AAGQ,AAACC,AAAYC,AAAOR;AAL7C,AAOQ,AAACO,AAAYC,AAAOf;;AAE9B;;;AAAA,AAAMgB,AAEHC;AAFH,AAGOA,AACA,AAAA,AAACC,AACD,AAACC;;AAER,AAAA,AAAMC,AACHC;AADH,AAGO,AAACC,AAAI,AAAAC,AACL,AAACK,AAAOC;AADH,AAAA,AAAAL,AAAAD;AAAA,AAAAnB,AAAAoB,AAAA,AAAA,AAAMC;AAAN,AAAArB,AAAAoB,AAAA,AAAA,AAAQE;AAAR,AAAA,AAAaD,AAAE,AAACE,AAAI9B,AAAY6B;AADrCL;;AAKP,AAAA,AAAMS,AACHC;AADH,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMD;;AAUT;;;;AAAA,AAAME,AAGHC;AAHH,AAIE,AAAA,AAAA,AAAKA,AACAlB,AACA,AAAA,AAACM,AAAIN,AACLjB,AACAqB,AACAU;;AAEP,AAAA,AAAMM,AACHC;AADH,AAAA,AAES,AAAK,AAAA,AAAM,AAACV,AAAI7B,AAAWuC;AAFpC;AAAA,AAAA,AAAA,AAAAF,AAAA;;;AAGE,AAACF,AAAW,AAACN,AAAI7B,AAAWuC;;AAI9B,AAAA,AAACD","names":["proto-crawl.maps.main/glyph-table","proto-crawl.maps.main/basic-maps","proto-crawl.maps.main/trimmed-levelstr->levelmap","trimmed","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__45062","vec__45063","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","row-idx","row","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__45066","vec__45067","row-map","col-idx","glyph","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","proto-crawl.maps.main/trim-sides","coll","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1","proto-crawl.maps.main/str-table->data-table","data-table","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__45070","vec__45071","k","v","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/merge","proto-crawl.maps.main/add-doors","glyph-map","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","proto-crawl.maps.main/str->level","levelstr","js/Error","proto-crawl.maps.main/loader","map-key"],"sourcesContent":["(ns proto-crawl.maps.main)\n\n(def glyph-table\n  {\".\" :floor\n   \"#\" :wall\n   \"*\" :void\n   \"w\" :water})\n\n(def basic-maps\n  {:feature [\"00123DD67890\"\n             \"0......####0\"\n             \"1####..####1\"\n             \"2..##...###2\"\n             \"3........##3\"\n             \"D..www.....D\"\n             \"D..wwww....D\"\n             \"6.....w....6\"\n             \"7wwwwwwww..7\"\n             \"8...##.....9\"\n             \"9..........9\"\n             \"00123DD67890\"]\n   :blank   [\"001234567890\"\n             \"0..........0\"\n             \"1..........1\"\n             \"2..........2\"\n             \"3..........3\"\n             \"4..........4\"\n             \"5..........5\"\n             \"6..........6\"\n             \"7..........7\"\n             \"8..........9\"\n             \"9..........9\"\n             \"001234567890\"]})\n\n(defn trimmed-levelstr->levelmap\n  \"Take a coll of colls and turn it into a map of\n  [col-idx row-idx] => contents-of-intersection\"\n  [trimmed]\n  (reduce (fn [acc [row-idx row]]\n            (merge acc\n                   (reduce (fn [row-map [col-idx glyph]]\n                             (merge row-map {[col-idx row-idx] glyph}))\n                           {}\n                           (map-indexed vector row))))\n          {}\n          (map-indexed vector trimmed)))\n\n(defn trim-sides\n  \"Trim first and last items from a coll.\"\n  [coll]\n  (->> coll\n       (drop 1)\n       (drop-last)))\n\n(defn str-table->data-table\n  [data-table]\n  (->> data-table\n       (map (fn [[k v]] {k (get glyph-table v)}))\n       (reduce merge)))\n\n\n(defn add-doors\n  [glyph-map]\n  (assoc glyph-map\n         [-1 4] :door\n         [-1 5] :door\n         [10 4] :door\n         [10 5] :door\n         [4 -1] :door\n         [5 -1] :door\n         [4 10] :door\n         [5 10] :door))\n\n(defn str->level\n  \"Take a level defined by its visual representation and\n  convert to data.\"\n  [levelstr]\n  (->> levelstr\n       trim-sides\n       (map trim-sides)\n       trimmed-levelstr->levelmap\n       str-table->data-table\n       add-doors))\n\n(defn loader\n  [map-key]\n  {:pre [(not (nil? (get basic-maps map-key)))]}\n  (str->level (get basic-maps map-key)))\n\n\n\n(loader :feature)\n"]}