{
"version":3,
"file":"module$node_modules$left_pad$index.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,mCAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAOpHF,MAAAC,QAAA,CAeAE,QAAiB,CAACC,GAAD,CAAMC,GAAN,CAAWC,EAAX,CAAe,CAExBF,GAAN,EAAY,EAENC,IAAN,EAAYD,GAAAG,OAEZ,IAAW,CAAX,EAAIF,GAAJ,CAAc,MAAOD,IAEhBE,GAAL,EAAkB,CAAlB,GAAWA,EAAX,GAAqBA,EAArB,CAA0B,GAA1B,CAEKA,GAAL,EAAU,EAEV,IAAW,GAAX,GAAIA,EAAJ,EAAwB,EAAxB,CAAkBD,GAAlB,CAA4B,MAAOG,MAAA,CAAMH,GAAN,CAAP,CAAoBD,GAIhD,KAFA,IAAIK,IAAM,EAEV,CAAA,CAAA,CAQE,GANIJ,GAEJA,CAFU,CAEVA,GAFaI,GAEbJ,EAFoBC,EAEpBD,EAAAA,GAAAA,GAAQ,CAIR,CAASC,EAAA,EAAMA,EAAf,KAEK,MAGP,OAAOG,IAAP,CAAaL,GA7BiB,CAbhC,KAAII,MAAQ,wDAAA,MAAA,CAAA,GAAA,CATwG;",
"sources":["node_modules/left-pad/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$left_pad$index\"] = function(global,process,require,module,exports,shadow$shims) {\n/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\n'use strict';\nmodule.exports = leftPad;\n\nvar cache = [\n  '',\n  ' ',\n  '  ',\n  '   ',\n  '    ',\n  '     ',\n  '      ',\n  '       ',\n  '        ',\n  '         '\n];\n\nfunction leftPad (str, len, ch) {\n  // convert `str` to a `string`\n  str = str + '';\n  // `len` is the `pad`'s length now\n  len = len - str.length;\n  // doesn't need to pad\n  if (len <= 0) return str;\n  // `ch` defaults to `' '`\n  if (!ch && ch !== 0) ch = ' ';\n  // convert `ch` to a `string` cuz it could be a number\n  ch = ch + '';\n  // cache common use cases\n  if (ch === ' ' && len < 10) return cache[len] + str;\n  // `pad` starts with an empty string\n  var pad = '';\n  // loop\n  while (true) {\n    // add `ch` to `pad` if `len` is odd\n    if (len & 1) pad += ch;\n    // divide `len` by 2, ditch the remainder\n    len >>= 1;\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\n    // similar to finding a value in binary search tree, hence O(log(n))\n    if (len) ch += ch;\n    // `len` is 0, exit the loop\n    else break;\n  }\n  // pad `str`!\n  return pad + str;\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","leftPad","str","len","ch","length","cache","pad"]
}
