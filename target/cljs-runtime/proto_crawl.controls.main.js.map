{"version":3,"sources":["proto_crawl/controls/main.cljs"],"mappings":"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","names":["proto-crawl.controls.main/move-up-names","proto-crawl.controls.main/move-down-names","proto-crawl.controls.main/move-left-names","proto-crawl.controls.main/move-right-names","proto-crawl.controls.main/movement-key-names","clojure.set.union.cljs$core$IFn$_invoke$arity$variadic","proto-crawl.controls.main/player-can-pass-tile?","game-map","candidate-pos","ocr-44282","cljs.core/keyword-identical?","cljs.core.match/backtrack","e44284","js/Error","e__43219__auto__","e44285","e44286","e44287","e44288","cljs.core.get.cljs$core$IFn$_invoke$arity$2","proto-crawl.controls.main/tile-free-for-player?","db","candidate-vec","entities","and__4120__auto__","cljs.core/not","proto-crawl.entities.utils/entity-at?","proto-crawl.controls.main/keyname->move-map","keyname","proto-crawl.controls.main/keyname->direction","proto-crawl.controls.main/take-move-input","key-pressed","vec__44289","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__44292","dx","dy","direction","current-orientation","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","px","py","candidate-move","cljs.core/assoc-in","proto-crawl.cube.main/roll"],"sourcesContent":["(ns proto-crawl.controls.main\n  (:require\n    [clojure.set :as s]\n    [proto-crawl.cube.main :as cube]\n    [clojure.core.match :refer [match]]\n    [proto-crawl.entities.utils :as entity-utils]))\n\n(def move-up-names\n  #{\"ArrowUp\" \"k\"})\n(def move-down-names\n  #{\"ArrowDown\" \"j\"})\n(def move-left-names\n  #{\"ArrowLeft\" \"h\"})\n(def move-right-names\n  #{\"ArrowRight\" \"l\"})\n\n(def movement-key-names\n  (s/union move-up-names\n           move-down-names\n           move-left-names\n           move-right-names))\n\n(defn player-can-pass-tile?\n  [game-map candidate-pos]\n  (match (get game-map candidate-pos)\n         :floor true\n         :wall false\n         :void false\n         :door true\n         :water false))\n\n(defn tile-free-for-player?\n  \"Can the player move into the candidate tile?\n  Currently only checks that the candidate space is in the map.\n  Will want to add collision detection for entities, obstacles, etc.\"\n  [db candidate-vec]\n  (let [game-map (get db :current-map)\n        entities (get db :entities)]\n    (and\n      (not (entity-utils/entity-at? entities candidate-vec))\n      (get game-map candidate-vec)\n      (player-can-pass-tile? game-map candidate-vec))))\n\n(defn keyname->move-map\n  \"Take a keyname (e.g. 'ArrowUp') and translate it to a movement map.\"\n  [keyname]\n  (cond (get move-up-names keyname) [0 -1]\n        (get move-down-names keyname) [0 1]\n        (get move-left-names keyname) [-1 0]\n        (get move-right-names keyname) [1 0]))\n\n(defn keyname->direction\n  \"Take a keyname (e.g. 'ArrowUp') and translate it to a movement kw.\n  valid keywords are #{:north :south :east :west}\"\n  [keyname]\n  (cond (get move-up-names keyname) :north\n        (get move-down-names keyname) :south\n        (get move-left-names keyname) :west\n        (get move-right-names keyname) :east))\n\n(defn take-move-input\n  \"Take a movement key name (defined in movement-key-names) and:\n  1. update the db if it's a legal move, or\n  2. return the db if it's an illegal move. \"\n  [db key-pressed]\n  (let [[dx dy] (keyname->move-map key-pressed)\n        direction           (keyname->direction key-pressed)\n        current-orientation (get-in db [:player :orientation])\n        [px py] (get-in db [:player :position])\n        candidate-move      [(+ dx px) (+ dy py)]]\n    (if (tile-free-for-player? db candidate-move)\n      (-> db\n        (assoc-in [:player :position] candidate-move)\n        (assoc-in [:player :orientation] (cube/roll current-orientation direction)))\n      db)))\n\n"]}