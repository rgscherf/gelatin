{"version":3,"sources":["proto_crawl/entities/main.cljs"],"mappings":";;;;;AAMA,AAAA,AAACA;AACD,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAgBC;AAChB,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAkB,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWG;AAAX,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAA,AAAAC,AAAA,AAAAF,AAAsBI;AAAtB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAsBA;AACxC,AAAAP,AAAA,AAAA,AAAA,AAAA,AAAcQ;AACd,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAYM;AACZ,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAgB,AAAAS,AAAIC;AAAJ,AAAA,AAAAD;AAAAA;;AAASE;;;AACzB,AAAAX,AAAA,AAAA,AAAA,AAAA,AAAeQ;AACf,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAe,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAOf,AAAA,AAAMG;AAAN,AAAA;;AAEA,AAAA,AAAMC,AAAoBC;AAA1B,AAA8BA;;AAE9B,AAAA,AAAMG;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOeF,AACA,AAACS,AAAgBC;AARhC,AAAA,AAEU,AAAAL,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAkBN,AAAAA,AAAAA;AAF5B;AAAA,AAAA,AAAA,AAAAC,AAAA;;;AAAAD","names":["cljs.spec.alpha/check-asserts","cljs.spec.alpha/def-impl","cljs.core/fn?","cljs.spec.alpha.every_impl.cljs$core$IFn$_invoke$arity$4","G__45124","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/bounded-count","cljs.core/int?","cljs.core/vector?","cljs.core/string?","or__4131__auto__","cljs.core/nil?","cljs.core/keyword?","cljs.spec.alpha/map-spec-impl","G__45125","cljs.core/map?","cljs.core/contains?","proto-crawl.entities.main/dan-d-doodad","proto-crawl.entities.main/cleaner-bot-action","db","%","js/Error","proto-crawl.entities.main/cleaner-bot","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","proto-crawl.rot-js.rng/random-item","proto-crawl.entities.utils/greek-alphabet"],"sourcesContent":["(ns proto-crawl.entities.main\n  (:require\n    [proto-crawl.rot-js.rng :as rng]\n    [cljs.spec.alpha :as s]\n    [proto-crawl.entities.utils :as entity-utils]))\n\n(s/check-asserts true)\n(s/def ::action fn?)\n(s/def ::position (s/coll-of int? :kind vector? :count 2))\n(s/def ::name string?)\n(s/def ::hp int?)\n(s/def ::status (or nil? keyword?))\n(s/def ::glyph string?)\n(s/def ::enemy (s/keys :req-un [::position\n                                ::name\n                                ::action\n                                ::hp\n                                ::status\n                                ::glyph]))\n\n(defn dan-d-doodad [] {})\n\n(defn cleaner-bot-action [db] db)\n\n(defn cleaner-bot\n  []\n  {:post [(s/assert ::enemy %)]}\n  {:position   [9 9]\n   :name       \"ScrubBuddy 6000\"\n   :hp         0\n   :status     nil\n   :action     cleaner-bot-action\n   :identifier (rng/random-item entity-utils/greek-alphabet)\n   :glyph      \"C\"})\n\n\n\n"]}