{"version":3,"sources":["proto_crawl/rot_js/rng.cljs"],"mappings":";;;;AAMA,AACEA,AACA,AAAOC;AAET;;;AAAA,AAAMC;AAAN,AAGE,AAAaF;;AAEf;;;;AAAA,AAAMG,AAGHC,AAAKC;AAHR,AAIE,AAAYL,AAAII,AAAKC;;AAEvB;;;AAAA,AAAMC;AAAN,AAGE,AAAgBN;;AAElB;;;AAAA,AAAMO,AAEHC;AAFH,AAGE,AAAUR,AAAI,AAACS,AAASD;;AAG1B;;;;;;;AAAA,AAAME,AAMHC;AANH,AAOE,AAAMC,AAAU,AAAmBZ,AAAI,AAACa,AAAMC,AACA,AAACC,AAAOC,AAAOL;AAD7D,AAEE,AAAI,AAAK,AAASC,AACT,AAAA,AAACK,AAAoBL;AAC1B,AAACM,AAAQ,AAAA,AAAA,AAACC,AAAeP;;AACzBA","names":["proto-crawl.rot-js.rng/rng","js/module$node_modules$rot_js$dist$rot","proto-crawl.rot-js.rng/uniform","proto-crawl.rot-js.rng/normal","mean","st-dev","proto-crawl.rot-js.rng/percentage","proto-crawl.rot-js.rng/random-item","coll","cljs.core/to-array","proto-crawl.rot-js.rng/weighted-value","valmap","selection","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/js-obj","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","clojure.string/starts-with?","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/replace"],"sourcesContent":["(ns proto-crawl.rot-js.rng\n  \"Wrapper for the ROT.RNG object.\"\n  (:require\n    [clojure.string :as string]\n    [\"rot-js\" :as rot]))\n\n(def ^:private\n  rng\n  (.-RNG rot))\n\n(defn uniform\n  \"random number [0..1] with uniform distribution (similar to Math.random())\"\n  []\n  (.getUniform rng))\n\n(defn normal\n  \"random number with normal distribution,\n  parametrized by a mean value and standard deviation\"\n  [mean st-dev]\n  (.getNormal rng mean st-dev))\n\n(defn percentage\n  \"random integer 1..100\"\n  []\n  (.getPercentage rng))\n\n(defn random-item\n  \"Pick a random item from a collection.\"\n  [coll]\n  (.getItem rng (to-array coll)))\n\n\n(defn weighted-value\n  \"Choosing from a list of values with uneven weights\n  is a common operation in Roguelike development.\n  The getWeightedValue method is useful for this task;\n  just give it a JS object with numeric weight values\n  (arbitrary numbers) and a corresponding key will be picked randomly.\"\n  [valmap]\n  (let [selection (.getWeightedValue rng (apply js-obj\n                                                (reduce concat valmap)))]\n    (if (and (string? selection) ;; keyword keys are returned as strings :(\n             (string/starts-with? selection \":\"))\n        (keyword (string/replace selection #\":\" \"\"))\n        selection)))\n\n"]}