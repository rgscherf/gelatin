{"version":3,"sources":["proto_crawl/view/main.cljs"],"mappings":";;;;;;;;AAUA,AAAA,AAAMA,AACHC;AADH,AAEE,AAACC,AAAuB,AAACC,AAAIC,AAAI,AAACC,AAAMJ,AAChB,AAACE,AAAIC,AAAI,AAACC,AAAMJ;;AAE1C,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAcA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAwB,AAAA,AAAAA,AAACC;;AACzB,AAAA,AAAMC,AACHC,AAAYC,AAASC,AAAWC;AADnC,AAEE,AAAM,AAACC,AAAEF,AAAWC;AAApB;;AAAA,AACM,AAACE,AAAuBJ,AAASE;AADvC;;AAAA,AAEY,AAACG,AAAIN,AAAYG;;;;;AAE/B,AAAA,AAAMI,AACHC,AAAEC;AADL,AAEE,AAAA,AAAA,AAAA,AAAS,AAAA,AAAGD,AAAa,AAAA,AAAGC;;AAE9B;;;;AAAA,AAAMC,AAGHF,AAAEC;AAHL,AAIE,AAAME,AAAS,AAAA,AAAA;AAAf,AACE,AAAA,AAAA,AAAK,AAAA,AAAGH,AAEH,AAAA,AAAGC;;AAGZ,AAAA,AAAMG,AACHC;AADH,AAEE,AAAAC,AAAc,AAAA,AAAA,AAAA,AAAAI,AAAA,AAAOL;AAAP,AAAA,AAAA;;AAAA,AAAA,AAAAM;;;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOL;AAAP,AAAA,AAAA;;AAAA,AAAA,AAAAM;;;AAAA,AAAA,AAAAI,AAAAF;AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOL;AAAP,AAAA,AAAA;;AAAA,AAAA,AAAAM;;;AAAA,AAAA,AAAAK,AAAAH;AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOL;AAAP,AAAA,AAAA;;AAAA,AAAA,AAAAM;;;AAAA,AAAA,AAAAM,AAAAJ;AAAA,AAAAC,AAAAG;AAAA,AAAA,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOL;AAAP,AAAA,AAAA;;AAAA,AAAA,AAAAM;;;AAAA,AAAA,AAAAO,AAAAL;AAAA,AAAAC,AAAAI;AAAA,AAAA,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAAG;;;AAAA,AAAA,AAAAI;;;;AAAA,AAAAJ;;;AAAA,AAAA,AAAAG;;;;AAAA,AAAAH;;;AAAA,AAAA,AAAAE;;;;AAAA,AAAAF;;;AAAA,AAAA,AAAAC;;;;AAAA,AAAAD;;;AAAA,AAAA,AAAAF;;;;AAAd,AAAAL,AAAAD,AAAA,AAAA,AAAOE;AAAP,AAAAD,AAAAD,AAAA,AAAA,AAAUG;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASsC,AAACP,AAAwBM,AAAGC;;AAQpE,AAAA,AAAAU,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAA,AAAAZ,AAAAa,AAAA,AAAA,AACInB;AADJ,AAAAM,AAAAa,AAAA,AAAA,AACMpB;AADN,AAEE,AAAA,AAAAsB,AACM9B,AAAe,AAAA+B,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AADtB,AAAAF,AAEMG,AAAe,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACF,AAAAA,AAAAA;;AAFtB,AAAAF,AAGM7B,AAAe,AAAAkC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACH,AAAAA,AAAAA;;AAChBI,AAAc,AAACrC,AAAoBC,AACAC,AACA,AAAA,AAAA,AAAA6B,AAAY,AAAAO,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACL,AAAAA,AAAAA;AAFlC,AAGsBxB,AAAEC;AAP5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAakC,AAAA,AAAA,AAAA,AAAAS,AAAA,AAAOkB;AAAP;;AAAA,AAAA,AAAAjB;;;AAAA,AAAA,AAAAmB,AAAAjB;AAAA,AAAAC,AAAAgB;AAAA,AAAA,AAAA,AAAAhB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOkB;AAAP;;AAAA,AAAA,AAAAjB;;;AAAA,AAAA,AAAAoB,AAAAlB;AAAA,AAAAC,AAAAiB;AAAA,AAAA,AAAA,AAAAjB,AAAAH;AAAA,AAAA;;AAAA,AAAAG;;;AAAA,AAAA,AAAAiB;;;;AAAA,AAAAjB;;;AAAA,AAAA,AAAAgB;;;AAblC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAsBI,AAAA,AAAA,AAAA,AAAApB,AAAA,AAAOkB;AACQ,AAAC9B,AAAI2B,AACA,AAAA,AAAA,AAAAH,AAAK,AAAAY,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACV,AAAAA,AAAAA;;;AAF1B,AAAA,AAAAb;;;AAAA,AAAA,AAAAqB,AAAAnB;AAAA,AAAAC,AAAAkB;AAAA,AAAA,AAAA,AAAAlB,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOkB;AAGS,AAAMO,AAAI,AAAA,AAACtC,AAAuBJ,AAAUO,AAAEC;AACxCmC,AAAI,AAAA,AAAQD;AACZE,AAAI,AAAA,AAAaF;AAFvB,AAGE,AAAA,AAAA,AAAKC,AAAMC;;AAN7B,AAAA,AAAA1B;;;AAAA,AAAA,AAAAsB,AAAApB;AAAA,AAAAC,AAAAmB;AAAA,AAAA,AAAA,AAAAnB,AAAAH;AAAA,AAOa,AAACP,AAAWwB;;AAPzB,AAAAd;;;AAAA,AAAA,AAAAmB;;;;AAAA,AAAAnB;;;AAAA,AAAA,AAAAkB;;;;;AASN,AAAA,AAAMM;AAAN,AAEE,AAAA,AAAAhB,AAAMxC,AAAU,AAAAyD,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACf,AAAAA,AAAAA;;AAAjB,AACE,AAAA,AAACgB,AACK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAEe,AAACC,AAAqB5D,AACpC,AAACE,AAAIqC,AAAY,AAACxC,AAAWC;;AAGzC,AAAA,AAAM6D,AACHC,AAAQC,AAAKC;AADhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEkC,AAAA,AAAKD,AACL,AAAA,AAAKC,AAKpC,AAAAC,AAAc,AAAA,AAAAzB,AAACxB,AAAK,AAAAmD,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACzB,AAAAA,AAAAA;AACFoB;AADnB,AAAA,AAAAG;AAAA,AAAAA,AAASC;AAAT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYI,AAAKA;;AAGP,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AACgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAIC,AAAA,AAAA,AAAA,AAAAzC,AAAA,AAAOkC;AAAP,AAAA,AAAA,AAAA,AAGuBM;;AAHvB,AAAA,AAAAvC;;;AAAA,AAAA,AAAAyC,AAAAvC;AAAA,AAAAC,AAAAsC;AAAA,AAAA,AAAA,AAAAtC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOkC;AAAP,AAAA,AAAA,AAAA,AAMqBM;;AANrB,AAAA,AAAAvC;;;AAAA,AAAA,AAAA0C,AAAAxC;AAAA,AAAAC,AAAAuC;AAAA,AAAA,AAAA,AAAAvC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAOkC;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUuBM,AACAA;;AAXvB,AAAA,AAAAvC;;;AAAA,AAAA,AAAA2C,AAAAzC;AAAA,AAAAC,AAAAwC;AAAA,AAAA,AAAA,AAAAxC,AAAAH;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAO+B;;AAAP,AAAA9B;;;AAAA,AAAA,AAAAwC;;;;AAAA,AAAAxC;;;AAAA,AAAA,AAAAuC;;;;AAAA,AAAAvC;;;AAAA,AAAA,AAAAsC;;;AALlB,AAAA,AAAA;;;;AAqBL,AAAA,AAAMG;AAAN,AAEE,AAAAC,AAAA,AAAAlC,AAA6B,AAAA4C,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAC1C,AAAAA,AAAAA;;AAA9BgC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAA1D,AAAA0D,AAAA,AAAcI;AAAd,AAAA9D,AAAA0D,AAAA,AAAgBK;AAAhB,AAAA/D,AAAA0D,AAAA,AAAkBM;AAAlB,AAAAhE,AAAA0D,AAAA,AAAoBO;AAApB,AAAAjE,AAAA0D,AAAA,AAAsBQ;AAAtB,AAAAlE,AAAA0D,AAAA,AAAwBS;AAAxB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMItB,AAAkBiB,AAClBjB,AAAkBqB,AAClBrB,AAAkBkB,AAClBlB,AAAkBmB,AAClBnB,AAAkBsB,AAClBtB,AAAkBoB,AAClBpB,AAAkBoB,AAGlBpB,AACAA,AACAA;;AAEN,AAAA,AAAMwB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUIZ;;AAGJ,AAAA,AAAMa;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAeK9B,AACA6B;;AAEL,AAAA,AAAME;AAAN,AAAA,AAEGD","names":["proto-crawl.view.main/all-coords","map-size","clojure.math.combinatorics.cartesian_product.cljs$core$IFn$_invoke$arity$variadic","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/dec","cljs.core.range.cljs$core$IFn$_invoke$arity$1","proto-crawl.view.main/bottom-bar","cljs.spec.alpha/def-impl","p1__45025#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","proto-crawl.view.main/quick-tile-contents","current-map","entities","player-pos","tile-pos","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","proto-crawl.entities.utils/entity-at","cljs.core.get.cljs$core$IFn$_invoke$arity$2","proto-crawl.view.main/tile-coords->pixel-coords","x","y","proto-crawl.view.main/tile-coords->pct-coords","pct-unit","proto-crawl.view.main/mk-terrain","type","vec__45026","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tx","ty","cljs.core/keyword-identical?","cljs.core.match/backtrack","e45030","js/Error","e__43219__auto__","e45031","e45032","e45033","e45034","p__45035","vec__45036","proto-crawl.view.main/single-tile","cljs.core/deref","G__45039","re-frame.core/subscribe","current-cube","G__45040","G__45041","tile-contents","G__45042","e45044","e45045","e45047","e45048","G__45049","ent","g","i","proto-crawl.view.main/play-area","G__45050","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","proto-crawl.style.main/grid-container","proto-crawl.view.main/roll-preview-cell","face-id","coll","row","temp__5733__auto__","face","G__45051","border-style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","e45053","e45054","e45055","proto-crawl.view.main/roll-preview","map__45056","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","t","s","e","b","n","w","G__45057","proto-crawl.view.main/sidebar","proto-crawl.view.main/game-area","proto-crawl.view.main/game-root"],"sourcesContent":["(ns proto-crawl.view.main\n  (:require\n    [clojure.math.combinatorics :as comb]\n    [cljs.core.match :refer-macros [match]]\n    [cljs.spec.alpha :as s]\n    [re-frame.core :as rf]\n    [proto-crawl.style.main :as style]\n    [proto-crawl.entities.utils :as entity-utils]))\n\n\n(defn all-coords\n  [map-size]\n  (comb/cartesian-product (map dec (range map-size))\n                          (map dec (range map-size))))\n\n(defn bottom-bar\n  []\n  [:div {:id    \"bottom-ui-panel\"\n         :style {:background  \"black\"\n                 :display     \"flex\"\n                 :grid-column \"1 / span 4\"\n                 :height      \"100%\"}}\n   [:div {:style {:display \"flex\"\n                  :width   \"100%\"\n                  :height  \"100%\"}}\n    [:div \"hello\"]\n    #_(if-let [tooltip-ent @(rf/subscribe [:entity-tooltip])]\n        [entity-tooltip tooltip-ent])]])\n\n(s/def ::tile-contents #(not= nil %))\n(defn quick-tile-contents\n  [current-map entities player-pos tile-pos]\n  (cond (= player-pos tile-pos) :player\n        (entity-utils/entity-at entities tile-pos) :monster\n        :else (get current-map tile-pos)))\n\n(defn tile-coords->pixel-coords\n  [x y]\n  (str \"-\" (* x 16) \"px -\" (* y 24) \"px\"))\n\n(defn tile-coords->pct-coords\n  \"Convert coordinates of sprite sheet tiles (e.g. 0th from left, 2nd from top)\n  To percentage units, e.g. begin rendering from left 0% and top 20% of image.\"\n  [x y]\n  (let [pct-unit (/ 100 16)]\n    (str (* x 6.67)\n         \"% \"\n         (* y 10)\n         \"%\")))\n\n(defn mk-terrain\n  [type]\n  (let [[tx ty] (match type\n                       :water [2 1]\n                       :door [7 2]\n                       :floor [10 0]\n                       :wall [2 0]\n                       :void [2 1]\n                       :else [2 1])]\n    [:div {:style {:width               \"100%\"\n                   :height              \"100%\"\n                   :background-position (tile-coords->pct-coords tx ty) ;\"-128px -24px\"\n                   :image-rendering     \"pixelated\"\n                   :background-size     \"calc(100% * 16)\"\n                   :background-color    \"black\"\n                   :background-image    \"url(../resources/terrain.png)\"\n                   :background-repeat   \"no-repeat\"}}]))\n\n\n(defn single-tile\n  [[y x]]\n  ^{:key (str x \", \" y)}\n  (let [current-map   @(rf/subscribe [:current-map])\n        current-cube  @(rf/subscribe [:cube])\n        entities      @(rf/subscribe [:entities])\n        tile-contents (quick-tile-contents current-map\n                                           entities\n                                           (:position @(rf/subscribe [:player]))\n                                           [x y])]\n    [:div {:style {:max-height      \"100%\"\n                   :font-size       \"2vmin\"\n                   :display         \"flex\"\n                   :align-items     \"center\"\n                   :justify-content \"center\"\n                   :background      (match tile-contents\n                                           :player \"#111111\"\n                                           :nothing \"blue\"\n                                           :else \"black\")}}\n     [:div {:style {:height          \"100%\"\n                    :display         \"flex\"\n                    :align-items     \"center\"\n                    :justify-content \"center\"\n                    :width           \"100%\"}}\n      (match tile-contents\n             :player (get current-cube\n                          (:t @(rf/subscribe [:player-orientation])))\n             :monster (let [ent (entity-utils/entity-at entities [x y])\n                            g   (:glyph ent)\n                            i   (:identifier ent)]\n                        (str g \"(\" i \")\"))\n             :else (mk-terrain tile-contents))]]))\n\n(defn play-area\n  []\n  (let [map-size @(rf/subscribe [:viewport])]\n    (into []\n          (concat\n            [:div {:id    \"grid_container\"\n                   :style (style/grid-container map-size)}]\n            (map single-tile (all-coords map-size))))))\n\n\n(defn roll-preview-cell\n  [face-id coll row]\n  [:div {:style {:grid-column     (str coll \"/span 1\")\n                 :grid-row        (str row \"/span 1\")\n                 :display         \"flex\"\n                 :position        \"relative\"\n                 :justify-content \"center\"\n                 :align-items     \"center\"}}\n   (if-let [face (get @(rf/subscribe [:cube])\n                      face-id)]\n     ;; guides showing actual cube faces\n     [:div {:style {:margin          \"0.5vmin\"\n                    :width           \"90%\"\n                    :height          \"90%\"\n                    :display         \"flex\"\n                    :justify-content \"center\"\n                    :align-items     \"center\"\n                    :border-radius   \"0.5vmin\"\n                    :border          \"0.1vmin solid white\"}}\n      [:div\n       (str face)]]\n\n     ;; guides showing how bottom faces match\n     (let [border-style \"0.1vmin solid grey\"]\n       [:div {:style (merge\n                       {:width    \"100%\"\n                        :height   \"100%\"\n                        :position \"absolute\"}\n                       (match face-id\n                              :horizontal\n                              {:bottom        \"50%\"\n                               :border-bottom border-style}\n                              :vertical\n                              {:left        \"50%\"\n                               :border-left border-style}\n                              :corner\n                              {:bottom        \"50%\"\n                               :left          \"50%\"\n                               :border-bottom border-style\n                               :border-left   border-style}))}\n        [:span \" \"]]))])\n\n\n\n(defn roll-preview\n  []\n  (let [{:keys [t s e b n w]} @(rf/subscribe [:player-orientation])]\n    [:div {:id    \"sidebar__roll-preview\"\n           :style {:display               \"grid\"\n                   :grid-template-columns \"repeat(4, 1fr)\"\n                   :grid-template-rows    \"repeat(4, 1fr)\"\n                   :height                \"30%\" #_\"25.28%\"}}\n     [roll-preview-cell t 3 2]\n     [roll-preview-cell n 3 1]\n     [roll-preview-cell s 3 3]\n     [roll-preview-cell e 4 2]\n     [roll-preview-cell w 2 2]\n     [roll-preview-cell b 1 2]\n     [roll-preview-cell b 3 4]\n     ;; divs that render borders showing how bottom faces match\n     ;; on horizontal/vertical\n     [roll-preview-cell :horizontal 2 4]\n     [roll-preview-cell :vertical 1 3]\n     [roll-preview-cell :corner 1 4]]))\n\n(defn sidebar\n  []\n  [:div {:id    \"game__sidebar\"\n         :style {:grid-column      \"1 / span 2\"\n                 :grid-row         \"1 / span 6\"\n                 :display          \"flex\"\n                 :flex-direction   \"column\"\n                 :border           \"1px solid white\"\n                 :color            \"white\"\n                 :background-color \"black\"}}\n   [roll-preview]\n   [:div \"hi\"]])\n\n(defn game-area\n  []\n  [:div {:id    \"game-area-container\"\n         :style {:display         \"flex\"\n                 :justify-content \"center\"\n                 :align-items     \"center\"}}\n   [:div {:id    \"game-area\"\n          :style {:display               \"grid\"\n                  :height                \"96vmin\"\n                  :width                 \"128vmin\"\n                  :color                 \"green\"\n                  :grid-template-columns \"repeat(8, 1fr)\"\n                  :grid-template-rows    \"repeat(6, 1fr)\"\n                  :margin                \"0px\"}}\n\n    [play-area]\n    [sidebar]]])\n\n(defn game-root\n  []\n  [game-area])\n\n"]}